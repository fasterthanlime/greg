/* A recursive-descent parser generated by greg 0.4.4 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct _GREG;
#define YYRULECOUNT 32
#ifndef YY_ALLOC
#define YY_ALLOC(N, D) malloc(N)
#endif
#ifndef YY_CALLOC
#define YY_CALLOC(N, S, D) calloc(N, S)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(B, N, D) realloc(B, N)
#endif
#ifndef YY_FREE
#define YY_FREE free
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)     static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)    static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)      static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)     T
#endif
#ifndef YY_NAME
#define YY_NAME(N) yy##N
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size, D)              \
  {                                                     \
    int yyc= getchar();                                 \
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);        \
    yyprintf((stderr, "<%c>", yyc));                  \
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN        ( G->begin= G->pos, 1)
#endif
#ifndef YY_END
#define YY_END          ( G->end= G->pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args) fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#ifndef YY_XTYPE
#define YY_XTYPE void *
#endif
#ifndef YY_XVAR
#define YY_XVAR yyxvar
#endif

#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_START_SIZE
#define YY_BUFFER_START_SIZE 1024
#endif

#ifndef YY_PART
#define yydata G->data
#define yy G->ss

struct _yythunk; // forward declaration
typedef void (*yyaction)(struct _GREG *G, char *yytext, int yyleng, struct _yythunk *thunkpos, YY_XTYPE YY_XVAR);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

typedef struct _GREG {
  char *buf;
  int buflen;
  int   offset;
  int   pos;
  int   limit;
  char *text;
  int   textlen;
  int   begin;
  int   end;
  yythunk *thunks;
  int   thunkslen;
  int thunkpos;
  YYSTYPE ss;
  YYSTYPE *val;
  YYSTYPE *vals;
  int valslen;
  YY_XTYPE data;
} GREG;

YY_LOCAL(int) yyrefill(GREG *G)
{
  int yyn;
  while (G->buflen - G->pos < 512)
    {
      G->buflen *= 2;
      G->buf= (char*)YY_REALLOC(G->buf, G->buflen, G->data);
    }
  YY_INPUT((G->buf + G->pos), yyn, (G->buflen - G->pos), G->data);
  if (!yyn) return 0;
  G->limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(GREG *G)
{
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  ++G->pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(GREG *G, int c)
{
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  if ((unsigned char)G->buf[G->pos] == c)
    {
      ++G->pos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, G->buf+G->pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, G->buf+G->pos));
  return 0;
}

YY_LOCAL(int) yymatchString(GREG *G, const char *s)
{
  int yysav= G->pos;
  while (*s)
    {
      if (G->pos >= G->limit && !yyrefill(G)) return 0;
      if (G->buf[G->pos] != *s)
        {
          G->pos= yysav;
          return 0;
        }
      ++s;
      ++G->pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(GREG *G, unsigned char *bits)
{
  int c;
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  c= (unsigned char)G->buf[G->pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++G->pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", G->buf+G->pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", G->buf+G->pos));
  return 0;
}

YY_LOCAL(void) yyDo(GREG *G, yyaction action, int begin, int end)
{
  while (G->thunkpos >= G->thunkslen)
    {
      G->thunkslen *= 2;
      G->thunks= (yythunk*)YY_REALLOC(G->thunks, sizeof(yythunk) * G->thunkslen, G->data);
    }
  G->thunks[G->thunkpos].begin=  begin;
  G->thunks[G->thunkpos].end=    end;
  G->thunks[G->thunkpos].action= action;
  ++G->thunkpos;
}

YY_LOCAL(int) yyText(GREG *G, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (G->textlen < (yyleng + 1))
        {
          G->textlen *= 2;
          G->text= (char*)YY_REALLOC(G->text, G->textlen, G->data);
        }
      memcpy(G->text, G->buf + begin, yyleng);
    }
  G->text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(GREG *G)
{
  int pos;
  for (pos= 0; pos < G->thunkpos; ++pos)
    {
      yythunk *thunk= &G->thunks[pos];
      int yyleng= thunk->end ? yyText(G, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, G->text));
      thunk->action(G, G->text, yyleng, thunk, G->data);
    }
  G->thunkpos= 0;
}

YY_LOCAL(void) yyCommit(GREG *G)
{
  if ((G->limit -= G->pos))
    {
      memmove(G->buf, G->buf + G->pos, G->limit);
    }
  G->offset += G->pos;
  G->begin -= G->pos;
  G->end -= G->pos;
  G->pos= G->thunkpos= 0;
}

YY_LOCAL(int) yyAccept(GREG *G, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(G);
      yyCommit(G);
    }
  return 1;
}

YY_LOCAL(void) yyPush(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR) { G->val += count; }
YY_LOCAL(void) yyPop(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR)  { G->val -= count; }
YY_LOCAL(void) yySet(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR)  { G->val[count]= G->ss; }

#endif /* YY_PART */

#define YYACCEPT        yyAccept(G, yythunkpos0)

YY_RULE(int) yy_EndOfLine(GREG *G); /* 32 */
YY_RULE(int) yy_Comment(GREG *G); /* 31 */
YY_RULE(int) yy_Space(GREG *G); /* 30 */
YY_RULE(int) yy_Range(GREG *G); /* 29 */
YY_RULE(int) yy_Char(GREG *G); /* 28 */
YY_RULE(int) yy_IdentCont(GREG *G); /* 27 */
YY_RULE(int) yy_IdentStart(GREG *G); /* 26 */
YY_RULE(int) yy_END(GREG *G); /* 25 */
YY_RULE(int) yy_BEGIN(GREG *G); /* 24 */
YY_RULE(int) yy_DOT(GREG *G); /* 23 */
YY_RULE(int) yy_Class(GREG *G); /* 22 */
YY_RULE(int) yy_Literal(GREG *G); /* 21 */
YY_RULE(int) yy_CLOSE(GREG *G); /* 20 */
YY_RULE(int) yy_OPEN(GREG *G); /* 19 */
YY_RULE(int) yy_PLUS(GREG *G); /* 18 */
YY_RULE(int) yy_STAR(GREG *G); /* 17 */
YY_RULE(int) yy_QUESTION(GREG *G); /* 16 */
YY_RULE(int) yy_Primary(GREG *G); /* 15 */
YY_RULE(int) yy_NOT(GREG *G); /* 14 */
YY_RULE(int) yy_Suffix(GREG *G); /* 13 */
YY_RULE(int) yy_Action(GREG *G); /* 12 */
YY_RULE(int) yy_AND(GREG *G); /* 11 */
YY_RULE(int) yy_Prefix(GREG *G); /* 10 */
YY_RULE(int) yy_SLASH(GREG *G); /* 9 */
YY_RULE(int) yy_Sequence(GREG *G); /* 8 */
YY_RULE(int) yy_Expression(GREG *G); /* 7 */
YY_RULE(int) yy_LEFTARROW(GREG *G); /* 6 */
YY_RULE(int) yy_Identifier(GREG *G); /* 5 */
YY_RULE(int) yy_EndOfFile(GREG *G); /* 4 */
YY_RULE(int) yy_Definition(GREG *G); /* 3 */
YY_RULE(int) yy_Spacing(GREG *G); /* 2 */
YY_RULE(int) yy_Grammar(GREG *G); /* 1 */

YY_ACTION(void) yy_7_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_7_Primary\n"));
   push(makePredicate("YY_END")); ;
}
YY_ACTION(void) yy_6_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_6_Primary\n"));
   push(makePredicate("YY_BEGIN")); ;
}
YY_ACTION(void) yy_5_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_5_Primary\n"));
   push(makeAction(yytext)); ;
}
YY_ACTION(void) yy_4_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_4_Primary\n"));
   push(makeDot()); ;
}
YY_ACTION(void) yy_3_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_3_Primary\n"));
   push(makeClass(yytext)); ;
}
YY_ACTION(void) yy_2_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_Primary\n"));
   push(makeString(yytext)); ;
}
YY_ACTION(void) yy_1_Primary(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Primary\n"));
   push(makeName(findRule(yytext))); ;
}
YY_ACTION(void) yy_3_Suffix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_3_Suffix\n"));
   push(makePlus (pop())); ;
}
YY_ACTION(void) yy_2_Suffix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_Suffix\n"));
   push(makeStar (pop())); ;
}
YY_ACTION(void) yy_1_Suffix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Suffix\n"));
   push(makeQuery(pop())); ;
}
YY_ACTION(void) yy_3_Prefix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_3_Prefix\n"));
   push(makePeekNot(pop())); ;
}
YY_ACTION(void) yy_2_Prefix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_Prefix\n"));
   push(makePeekFor(pop())); ;
}
YY_ACTION(void) yy_1_Prefix(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Prefix\n"));
   push(makePredicate(yytext)); ;
}
YY_ACTION(void) yy_2_Sequence(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_Sequence\n"));
   push(makePredicate("1")); ;
}
YY_ACTION(void) yy_1_Sequence(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Sequence\n"));
   Node *f= pop();  push(Sequence_append(pop(), f)); ;
}
YY_ACTION(void) yy_1_Expression(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Expression\n"));
   Node *f= pop();  push(Alternate_append(pop(), f)); ;
}
YY_ACTION(void) yy_2_Definition(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_Definition\n"));
   Node *e= pop();  Rule_setExpression(pop(), e); ;
}
YY_ACTION(void) yy_1_Definition(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_Definition\n"));
   if (push(beginRule(findRule(yytext)))->rule.expression) fprintf(stderr, "rule '%s' redefined\n", yytext); ;
}

YY_RULE(int) yy_EndOfLine(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "EndOfLine"));
  {  int yypos2= G->pos, yythunkpos2= G->thunkpos;  if (!yymatchString(G, "\r\n")) goto l3;  goto l2;
  l3:;	  G->pos= yypos2; G->thunkpos= yythunkpos2;  if (!yymatchChar(G, '\n')) goto l4;  goto l2;
  l4:;	  G->pos= yypos2; G->thunkpos= yythunkpos2;  if (!yymatchChar(G, '\r')) goto l1;
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfLine", G->buf+G->pos));
  return 1;
  l1:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfLine", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Comment(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchChar(G, '#')) goto l5;
  l6:;	
  {  int yypos7= G->pos, yythunkpos7= G->thunkpos;
  {  int yypos8= G->pos, yythunkpos8= G->thunkpos;  if (!yy_EndOfLine(G)) { goto l8; }  goto l7;
  l8:;	  G->pos= yypos8; G->thunkpos= yythunkpos8;
  }  if (!yymatchDot(G)) goto l7;  goto l6;
  l7:;	  G->pos= yypos7; G->thunkpos= yythunkpos7;
  }  if (!yy_EndOfLine(G)) { goto l5; }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", G->buf+G->pos));
  return 1;
  l5:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Space(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Space"));
  {  int yypos10= G->pos, yythunkpos10= G->thunkpos;  if (!yymatchChar(G, ' ')) goto l11;  goto l10;
  l11:;	  G->pos= yypos10; G->thunkpos= yythunkpos10;  if (!yymatchChar(G, '\t')) goto l12;  goto l10;
  l12:;	  G->pos= yypos10; G->thunkpos= yythunkpos10;  if (!yy_EndOfLine(G)) { goto l9; }
  }
  l10:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Space", G->buf+G->pos));
  return 1;
  l9:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Space", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Range(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Range"));
  {  int yypos14= G->pos, yythunkpos14= G->thunkpos;  if (!yy_Char(G)) { goto l15; }  if (!yymatchChar(G, '-')) goto l15;  if (!yy_Char(G)) { goto l15; }  goto l14;
  l15:;	  G->pos= yypos14; G->thunkpos= yythunkpos14;  if (!yy_Char(G)) { goto l13; }
  }
  l14:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Range", G->buf+G->pos));
  return 1;
  l13:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Range", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Char(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Char"));
  {  int yypos17= G->pos, yythunkpos17= G->thunkpos;  if (!yymatchChar(G, '\\')) goto l18;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\204\000\000\000\000\000\000\070\146\100\124\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l18;  goto l17;
  l18:;	  G->pos= yypos17; G->thunkpos= yythunkpos17;  if (!yymatchChar(G, '\\')) goto l19;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;  goto l17;
  l19:;	  G->pos= yypos17; G->thunkpos= yythunkpos17;  if (!yymatchChar(G, '\\')) goto l20;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l20;
  {  int yypos21= G->pos, yythunkpos21= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;  goto l22;
  l21:;	  G->pos= yypos21; G->thunkpos= yythunkpos21;
  }
  l22:;	  goto l17;
  l20:;	  G->pos= yypos17; G->thunkpos= yythunkpos17;  if (!yymatchChar(G, '\\')) goto l23;  if (!yymatchChar(G, '-')) goto l23;  goto l17;
  l23:;	  G->pos= yypos17; G->thunkpos= yythunkpos17;
  {  int yypos24= G->pos, yythunkpos24= G->thunkpos;  if (!yymatchChar(G, '\\')) goto l24;  goto l16;
  l24:;	  G->pos= yypos24; G->thunkpos= yythunkpos24;
  }  if (!yymatchDot(G)) goto l16;
  }
  l17:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Char", G->buf+G->pos));
  return 1;
  l16:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Char", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_IdentCont(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "IdentCont"));
  {  int yypos26= G->pos, yythunkpos26= G->thunkpos;  if (!yy_IdentStart(G)) { goto l27; }  goto l26;
  l27:;	  G->pos= yypos26; G->thunkpos= yythunkpos26;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l25;
  }
  l26:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "IdentCont", G->buf+G->pos));
  return 1;
  l25:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IdentCont", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_IdentStart(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "IdentStart"));  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l28;
  yyprintf((stderr, "  ok   %s @ %s\n", "IdentStart", G->buf+G->pos));
  return 1;
  l28:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IdentStart", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_END(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "END"));  if (!yymatchChar(G, '>')) goto l29;  if (!yy_Spacing(G)) { goto l29; }
  yyprintf((stderr, "  ok   %s @ %s\n", "END", G->buf+G->pos));
  return 1;
  l29:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "END", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_BEGIN(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "BEGIN"));  if (!yymatchChar(G, '<')) goto l30;  if (!yy_Spacing(G)) { goto l30; }
  yyprintf((stderr, "  ok   %s @ %s\n", "BEGIN", G->buf+G->pos));
  return 1;
  l30:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BEGIN", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_DOT(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "DOT"));  if (!yymatchChar(G, '.')) goto l31;  if (!yy_Spacing(G)) { goto l31; }
  yyprintf((stderr, "  ok   %s @ %s\n", "DOT", G->buf+G->pos));
  return 1;
  l31:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DOT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Class(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Class"));  if (!yymatchChar(G, '[')) goto l32;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l32;
  l33:;	
  {  int yypos34= G->pos, yythunkpos34= G->thunkpos;
  {  int yypos35= G->pos, yythunkpos35= G->thunkpos;  if (!yymatchChar(G, ']')) goto l35;  goto l34;
  l35:;	  G->pos= yypos35; G->thunkpos= yythunkpos35;
  }  if (!yy_Range(G)) { goto l34; }  goto l33;
  l34:;	  G->pos= yypos34; G->thunkpos= yythunkpos34;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l32;  if (!yymatchChar(G, ']')) goto l32;  if (!yy_Spacing(G)) { goto l32; }
  yyprintf((stderr, "  ok   %s @ %s\n", "Class", G->buf+G->pos));
  return 1;
  l32:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Class", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Literal(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Literal"));
  {  int yypos37= G->pos, yythunkpos37= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l38;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l38;
  l39:;	
  {  int yypos40= G->pos, yythunkpos40= G->thunkpos;
  {  int yypos41= G->pos, yythunkpos41= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l41;  goto l40;
  l41:;	  G->pos= yypos41; G->thunkpos= yythunkpos41;
  }  if (!yy_Char(G)) { goto l40; }  goto l39;
  l40:;	  G->pos= yypos40; G->thunkpos= yythunkpos40;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l38;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l38;  if (!yy_Spacing(G)) { goto l38; }  goto l37;
  l38:;	  G->pos= yypos37; G->thunkpos= yythunkpos37;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l36;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l36;
  l42:;	
  {  int yypos43= G->pos, yythunkpos43= G->thunkpos;
  {  int yypos44= G->pos, yythunkpos44= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l44;  goto l43;
  l44:;	  G->pos= yypos44; G->thunkpos= yythunkpos44;
  }  if (!yy_Char(G)) { goto l43; }  goto l42;
  l43:;	  G->pos= yypos43; G->thunkpos= yythunkpos43;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l36;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l36;  if (!yy_Spacing(G)) { goto l36; }
  }
  l37:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Literal", G->buf+G->pos));
  return 1;
  l36:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Literal", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_CLOSE(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE"));  if (!yymatchChar(G, ')')) goto l45;  if (!yy_Spacing(G)) { goto l45; }
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE", G->buf+G->pos));
  return 1;
  l45:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_OPEN(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "OPEN"));  if (!yymatchChar(G, '(')) goto l46;  if (!yy_Spacing(G)) { goto l46; }
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN", G->buf+G->pos));
  return 1;
  l46:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_PLUS(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "PLUS"));  if (!yymatchChar(G, '+')) goto l47;  if (!yy_Spacing(G)) { goto l47; }
  yyprintf((stderr, "  ok   %s @ %s\n", "PLUS", G->buf+G->pos));
  return 1;
  l47:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PLUS", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_STAR(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "STAR"));  if (!yymatchChar(G, '*')) goto l48;  if (!yy_Spacing(G)) { goto l48; }
  yyprintf((stderr, "  ok   %s @ %s\n", "STAR", G->buf+G->pos));
  return 1;
  l48:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STAR", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_QUESTION(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "QUESTION"));  if (!yymatchChar(G, '?')) goto l49;  if (!yy_Spacing(G)) { goto l49; }
  yyprintf((stderr, "  ok   %s @ %s\n", "QUESTION", G->buf+G->pos));
  return 1;
  l49:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "QUESTION", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Primary(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Primary"));
  {  int yypos51= G->pos, yythunkpos51= G->thunkpos;  if (!yy_Identifier(G)) { goto l52; }
  {  int yypos53= G->pos, yythunkpos53= G->thunkpos;  if (!yy_LEFTARROW(G)) { goto l53; }  goto l52;
  l53:;	  G->pos= yypos53; G->thunkpos= yythunkpos53;
  }  yyDo(G, yy_1_Primary, G->begin, G->end);  goto l51;
  l52:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_OPEN(G)) { goto l54; }  if (!yy_Expression(G)) { goto l54; }  if (!yy_CLOSE(G)) { goto l54; }  goto l51;
  l54:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_Literal(G)) { goto l55; }  yyDo(G, yy_2_Primary, G->begin, G->end);  goto l51;
  l55:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_Class(G)) { goto l56; }  yyDo(G, yy_3_Primary, G->begin, G->end);  goto l51;
  l56:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_DOT(G)) { goto l57; }  yyDo(G, yy_4_Primary, G->begin, G->end);  goto l51;
  l57:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_Action(G)) { goto l58; }  yyDo(G, yy_5_Primary, G->begin, G->end);  goto l51;
  l58:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_BEGIN(G)) { goto l59; }  yyDo(G, yy_6_Primary, G->begin, G->end);  goto l51;
  l59:;	  G->pos= yypos51; G->thunkpos= yythunkpos51;  if (!yy_END(G)) { goto l50; }  yyDo(G, yy_7_Primary, G->begin, G->end);
  }
  l51:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Primary", G->buf+G->pos));
  return 1;
  l50:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Primary", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_NOT(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "NOT"));  if (!yymatchChar(G, '!')) goto l60;  if (!yy_Spacing(G)) { goto l60; }
  yyprintf((stderr, "  ok   %s @ %s\n", "NOT", G->buf+G->pos));
  return 1;
  l60:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NOT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Suffix(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Suffix"));  if (!yy_Primary(G)) { goto l61; }
  {  int yypos62= G->pos, yythunkpos62= G->thunkpos;
  {  int yypos64= G->pos, yythunkpos64= G->thunkpos;  if (!yy_QUESTION(G)) { goto l65; }  yyDo(G, yy_1_Suffix, G->begin, G->end);  goto l64;
  l65:;	  G->pos= yypos64; G->thunkpos= yythunkpos64;  if (!yy_STAR(G)) { goto l66; }  yyDo(G, yy_2_Suffix, G->begin, G->end);  goto l64;
  l66:;	  G->pos= yypos64; G->thunkpos= yythunkpos64;  if (!yy_PLUS(G)) { goto l62; }  yyDo(G, yy_3_Suffix, G->begin, G->end);
  }
  l64:;	  goto l63;
  l62:;	  G->pos= yypos62; G->thunkpos= yythunkpos62;
  }
  l63:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Suffix", G->buf+G->pos));
  return 1;
  l61:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Suffix", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Action(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Action"));  if (!yymatchChar(G, '{')) goto l67;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l67;
  l68:;	
  {  int yypos69= G->pos, yythunkpos69= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\337\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l69;  goto l68;
  l69:;	  G->pos= yypos69; G->thunkpos= yythunkpos69;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l67;  if (!yymatchChar(G, '}')) goto l67;  if (!yy_Spacing(G)) { goto l67; }
  yyprintf((stderr, "  ok   %s @ %s\n", "Action", G->buf+G->pos));
  return 1;
  l67:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Action", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_AND(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "AND"));  if (!yymatchChar(G, '&')) goto l70;  if (!yy_Spacing(G)) { goto l70; }
  yyprintf((stderr, "  ok   %s @ %s\n", "AND", G->buf+G->pos));
  return 1;
  l70:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AND", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Prefix(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Prefix"));
  {  int yypos72= G->pos, yythunkpos72= G->thunkpos;  if (!yy_AND(G)) { goto l73; }  if (!yy_Action(G)) { goto l73; }  yyDo(G, yy_1_Prefix, G->begin, G->end);  goto l72;
  l73:;	  G->pos= yypos72; G->thunkpos= yythunkpos72;  if (!yy_AND(G)) { goto l74; }  if (!yy_Suffix(G)) { goto l74; }  yyDo(G, yy_2_Prefix, G->begin, G->end);  goto l72;
  l74:;	  G->pos= yypos72; G->thunkpos= yythunkpos72;  if (!yy_NOT(G)) { goto l75; }  if (!yy_Suffix(G)) { goto l75; }  yyDo(G, yy_3_Prefix, G->begin, G->end);  goto l72;
  l75:;	  G->pos= yypos72; G->thunkpos= yythunkpos72;  if (!yy_Suffix(G)) { goto l71; }
  }
  l72:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Prefix", G->buf+G->pos));
  return 1;
  l71:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Prefix", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_SLASH(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "SLASH"));  if (!yymatchChar(G, '/')) goto l76;  if (!yy_Spacing(G)) { goto l76; }
  yyprintf((stderr, "  ok   %s @ %s\n", "SLASH", G->buf+G->pos));
  return 1;
  l76:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SLASH", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Sequence(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Sequence"));
  {  int yypos78= G->pos, yythunkpos78= G->thunkpos;  if (!yy_Prefix(G)) { goto l79; }
  l80:;	
  {  int yypos81= G->pos, yythunkpos81= G->thunkpos;  if (!yy_Prefix(G)) { goto l81; }  yyDo(G, yy_1_Sequence, G->begin, G->end);  goto l80;
  l81:;	  G->pos= yypos81; G->thunkpos= yythunkpos81;
  }  goto l78;
  l79:;	  G->pos= yypos78; G->thunkpos= yythunkpos78;  yyDo(G, yy_2_Sequence, G->begin, G->end);
  }
  l78:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Sequence", G->buf+G->pos));
  return 1;
  l77:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Sequence", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Expression(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Expression"));  if (!yy_Sequence(G)) { goto l82; }
  l83:;	
  {  int yypos84= G->pos, yythunkpos84= G->thunkpos;  if (!yy_SLASH(G)) { goto l84; }  if (!yy_Sequence(G)) { goto l84; }  yyDo(G, yy_1_Expression, G->begin, G->end);  goto l83;
  l84:;	  G->pos= yypos84; G->thunkpos= yythunkpos84;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Expression", G->buf+G->pos));
  return 1;
  l82:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expression", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_LEFTARROW(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "LEFTARROW"));  if (!yymatchString(G, "<-")) goto l85;  if (!yy_Spacing(G)) { goto l85; }
  yyprintf((stderr, "  ok   %s @ %s\n", "LEFTARROW", G->buf+G->pos));
  return 1;
  l85:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "LEFTARROW", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Identifier(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Identifier"));  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l86;  if (!yy_IdentStart(G)) { goto l86; }
  l87:;	
  {  int yypos88= G->pos, yythunkpos88= G->thunkpos;  if (!yy_IdentCont(G)) { goto l88; }  goto l87;
  l88:;	  G->pos= yypos88; G->thunkpos= yythunkpos88;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l86;  if (!yy_Spacing(G)) { goto l86; }
  yyprintf((stderr, "  ok   %s @ %s\n", "Identifier", G->buf+G->pos));
  return 1;
  l86:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Identifier", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_EndOfFile(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "EndOfFile"));
  {  int yypos90= G->pos, yythunkpos90= G->thunkpos;  if (!yymatchDot(G)) goto l90;  goto l89;
  l90:;	  G->pos= yypos90; G->thunkpos= yythunkpos90;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfFile", G->buf+G->pos));
  return 1;
  l89:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfFile", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Definition(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Definition"));  if (!yy_Identifier(G)) { goto l91; }  yyDo(G, yy_1_Definition, G->begin, G->end);  if (!yy_LEFTARROW(G)) { goto l91; }  if (!yy_Expression(G)) { goto l91; }  yyDo(G, yy_2_Definition, G->begin, G->end);  yyText(G, G->begin, G->end);  if (!( YYACCEPT )) goto l91;
  yyprintf((stderr, "  ok   %s @ %s\n", "Definition", G->buf+G->pos));
  return 1;
  l91:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Definition", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Spacing(GREG *G)
{
  yyprintf((stderr, "%s\n", "Spacing"));
  l93:;	
  {  int yypos94= G->pos, yythunkpos94= G->thunkpos;
  {  int yypos95= G->pos, yythunkpos95= G->thunkpos;  if (!yy_Space(G)) { goto l96; }  goto l95;
  l96:;	  G->pos= yypos95; G->thunkpos= yythunkpos95;  if (!yy_Comment(G)) { goto l94; }
  }
  l95:;	  goto l93;
  l94:;	  G->pos= yypos94; G->thunkpos= yythunkpos94;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Spacing", G->buf+G->pos));
  return 1;
}
YY_RULE(int) yy_Grammar(GREG *G)
{  int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "Grammar"));  if (!yy_Spacing(G)) { goto l97; }  if (!yy_Definition(G)) { goto l97; }
  l98:;	
  {  int yypos99= G->pos, yythunkpos99= G->thunkpos;  if (!yy_Definition(G)) { goto l99; }  goto l98;
  l99:;	  G->pos= yypos99; G->thunkpos= yythunkpos99;
  }  if (!yy_EndOfFile(G)) { goto l97; }
  yyprintf((stderr, "  ok   %s @ %s\n", "Grammar", G->buf+G->pos));
  return 1;
  l97:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Grammar", G->buf+G->pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(GREG *G);

YY_PARSE(int) YY_NAME(parse_from)(GREG *G, yyrule yystart)
{
  int yyok;
  if (!G->buflen)
    {
      G->buflen= YY_BUFFER_START_SIZE;
      G->buf= (char*)YY_ALLOC(G->buflen, G->data);
      G->textlen= YY_BUFFER_START_SIZE;
      G->text= (char*)YY_ALLOC(G->textlen, G->data);
      G->thunkslen= YY_STACK_SIZE;
      G->thunks= (yythunk*)YY_ALLOC(sizeof(yythunk) * G->thunkslen, G->data);
      G->valslen= YY_STACK_SIZE;
      G->vals= (YYSTYPE*)YY_ALLOC(sizeof(YYSTYPE) * G->valslen, G->data);
      G->begin= G->end= G->pos= G->limit= G->thunkpos= 0;
    }
  G->pos = 0;
  G->begin= G->end= G->pos;
  G->thunkpos= 0;
  G->val= G->vals;
  yyok= yystart(G);
  if (yyok) yyDone(G);
  yyCommit(G);
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
}

YY_PARSE(int) YY_NAME(parse)(GREG *G)
{
  return YY_NAME(parse_from)(G, yy_Grammar);
}

YY_PARSE(void) YY_NAME(init)(GREG *G)
{
    memset(G, 0, sizeof(GREG));
}
YY_PARSE(void) YY_NAME(deinit)(GREG *G)
{
    if (G->buf) YY_FREE(G->buf);
    if (G->text) YY_FREE(G->text);
    if (G->thunks) YY_FREE(G->thunks);
    if (G->vals) YY_FREE(G->vals);
}
YY_PARSE(GREG *) YY_NAME(parse_new)(YY_XTYPE data)
{
  GREG *G = (GREG *)YY_CALLOC(1, sizeof(GREG), G->data);
  G->data = data;
  return G;
}

YY_PARSE(void) YY_NAME(parse_free)(GREG *G)
{
  YY_NAME(deinit)(G);
  YY_FREE(G);
}

#endif
